

#include <iostream>
#include <cstdlib> // For std::malloc and std::free

using namespace std;

void incrementArrayElements(int* arr, size_t size) {
    // Check for null pointer
    if (arr == nullptr) {
        cerr << "Error: Array pointer is null." << endl;
        return;
    }

    // Check for zero size array
    if (size == 0) {
        cout << "Array is empty." << endl;
        return;
    }

    // Increment each element using pointer arithmetic
    int* current = arr;
    for (size_t i = 0; i < size; i++) {
        (*current)++;
        current++;
    }
}

int main() {
    int size;
    cout << "Enter the size of the array: ";
    cin >> size;

    // Check for invalid input size
    if (size <= 0) {
        cerr << "Error: Array size should be a positive integer." << endl;
        return 1;
    }

    // Allocate memory for the array dynamically
    int* arr = new int[size];

    // Check if memory allocation was successful
    if (arr == nullptr) {
        cerr << "Error: Failed to allocate memory for the array." << endl;
        return 1;
    }

    // Initialize the array
    cout << "Enter elements of the array: ";
    for (size_t i = 0; i < size; i++) {
        cin >> arr[i];
    }

    // Increment elements of the array
    incrementArrayElements(arr, size);

    // Display the updated array
    cout << "Updated array: ";
    for (size_t i = 0; i < size; i++) {
        cout << arr[i] << " ";
    }
    cout << endl;

    // Free the allocated memory to prevent memory leaks
    delete[] arr;

    return 0;
}
  
